{"version":3,"sources":["imgs/surf-spokane.svg","imgs/no-data.svg","components/header/Header.js","components/map/MapContainer.js","components/data_cards/DataCardGraph.js","components/data_cards/DataCardDisplay.js","components/data_cards/DataCardDesc.js","components/data_cards/DataCardHistory.js","components/data_cards/DataCardDetail.js","resource/Config.js","components/data_cards/DataCard.js","components/data_cards/DataCardDeck.js","App.js","serviceWorker.js","index.js","imgs/thumbs-up.svg","imgs/thumbs-down.svg","imgs/ok-hand.svg"],"names":["module","exports","Header","props","handleClick","bind","event","this","toggleMapVisibility","src","require","alt","id","className","type","checked","mapVisible","onClick","readOnly","htmlFor","version","xmlns","x","y","viewBox","enableBackground","points","Component","MapContainer","handleMarkerClick","marker","filterSpots","setState","selectedSpot","activeMarker","showingInfoWindow","center","lat","position","lng","onInfoWindowClose","unfilterSpots","state","getCenter","spots","zoom","getZoom","containerRef","React","createRef","spot","currentValue","max","min","optimumFlowHigh_i","optimumFlowLow_i","OkHand","ThumbsUp","ThumbsDown","length","location","lon","Math","map","pixelWidth","minLng","angle","floor","log","LN2","Infinity","parseInt","current","offsetWidth","ref","google","initialCenter","onMouseout","handleMapMouseOut","key","spot_id","name","value","unit","icon","getStatus","visible","onClose","GoogleApiWrapper","apiKey","process","language","DataCardGraph","optMin","optMax","values","maxDataValue","apply","record","maxChartValue","margin","width","height","data","date","Date","dateTime","d3","domain","d","range","svg","append","attr","datum","y0","y1","drawLineGraph","getSpotStatus","undefined","DataCardDisplay","currentFlow","units","defaultProps","DataCardDetail","DataCardHistory","months","month","day","days","i","push","setMonth","getDays","getColorValue","activeTab","handleHeaderButtonClick","button","forceUpdate","optLow","optHigh","optUnit","DataCardDesc","properties","DataCard","details","onChangeExpand","fetch","headers","then","response","json","find","target","fetchData","onChange","defaultChecked","expanded","DataCardDeck","App","surfSpots","filteredSpots","expandedCards","filtered","toggleCardExpand","filter","getSurfSpots","spotName","match","params","gageNumber","gage","toLowerCase","site","Boolean","window","hostname","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b761549.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/surf-spokane.00f3e031.svg\";","module.exports = __webpack_public_path__ + \"static/media/no-data.5370020e.svg\";","/*\r\n    File: Header.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component is intended to be the header bar at the top of the\r\n        web application. It also serves as the control for toggling the map\r\n        view visibility.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport '../../style/header.scss'\r\n\r\n class Header extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event){\r\n        this.props.toggleMapVisibility();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <img src={require(\"../../imgs/surf-spokane.svg\")} alt=\"Spokane Surf Logo\" />\r\n                <h1>Spokane Surf Report</h1>\r\n                <input id=\"map-button\" className=\"map-button\" type=\"checkbox\" \r\n                checked={this.props.mapVisible} onClick={this.handleClick} readOnly />\r\n\t\t\t\t<label htmlFor=\"map-button\" className=\"map-button-display\">\r\n\t\t\t\t\t<h2>Map</h2>\r\n                    <svg version=\"1.1\" \r\n                        id=\"arrow\" \r\n                        xmlns=\"http://www.w3.org/2000/svg\" \r\n                        x=\"0px\" y=\"0px\"\r\n                        viewBox=\"0 0 50 50\" \r\n                        enableBackground=\"new 0 0 50 50\" >\r\n                        <polygon points=\"25,6.555 50.009,6.555 37.505,25 25,43.445 12.496,25 -0.008,6.555 \"/>\r\n                    </svg>\r\n\t\t\t\t</label>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\r\nimport '../../style/map.scss'\r\nimport ThumbsUp from '../../imgs/thumbs-up.svg'\r\nimport ThumbsDown from '../../imgs/thumbs-down.svg'\r\nimport OkHand from '../../imgs/ok-hand.svg'\r\n\r\n class MapContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let pixelWidth = 0\r\n\r\n        this.state = {\r\n            center: this.getCenter(this.props.spots), // centers the map\r\n            zoom: this.getZoom(this.props.spots, pixelWidth), // calculates zoom level\r\n            showingInfoWindow: false,  //Hides or the shows the infoWindow\r\n            activeMarker: {},          //Shows the active marker upon click\r\n            selectedSpot: {}          //Shows the infoWindow to the selected place upon a marker\r\n        }\r\n        \r\n        this.containerRef = React.createRef()\r\n    }\r\n\r\n    getStatus(spot){\r\n        if( spot.currentValue <= spot.max && spot.currentValue >= spot.min ){\r\n            if ( spot.currentValue <= spot.optimumFlowHigh_i && spot.currentValue >= spot.optimumFlowLow_i ){\r\n                return OkHand;\r\n            } else {\r\n                return ThumbsUp;\r\n            }\r\n        }\r\n        else{\r\n            return ThumbsDown;\r\n        }\r\n    }\r\n\r\n    getCenter(spots){\r\n\r\n        if (spots.length === 1){\r\n            return { lat: spots[0].location.lat, lng: spots[0].location.lon }\r\n        }\r\n        else if (spots.length > 1){\r\n            // calculates min and max longitute\r\n            let minLat = Math.min(...spots.map((spot) => spot.location.lat));\r\n            let maxLat = Math.max(...spots.map((spot) => spot.location.lat));\r\n            let minLng = Math.min(...spots.map((spot) => spot.location.lon));\r\n            let maxLng = Math.max(...spots.map((spot) => spot.location.lon));\r\n\r\n            let lat = (minLat + maxLat) / 2.0;\r\n            let lng = (minLng + maxLng) / 2.0;;\r\n\r\n            return { lat: lat, lng: lng}\r\n        }\r\n        else{\r\n            return { lat: 47.7061299, lng: -117.1419032 }\r\n        }\r\n    }\r\n\r\n    getZoom(spots, pixelWidth){\r\n        let zoom = 11;\r\n        if(pixelWidth > 0){\r\n            // default google value\r\n            let GLOBE_WIDTH = 256;\r\n\r\n            // calculates min and max longitute\r\n            let minLng = Math.min(...spots.map((spot) => spot.location.lon));\r\n            let maxLng = Math.max(...spots.map((spot) => spot.location.lon));\r\n\r\n            // gets the angle\r\n            let angle = maxLng - minLng;\r\n            if( angle < 0 ){\r\n                angle += 360;\r\n            }\r\n\r\n            // calculates zoom level\r\n            zoom = Math.floor(Math.log(pixelWidth * 360 / angle / GLOBE_WIDTH) / Math.LN2);\r\n\r\n            if (zoom === Infinity){\r\n                zoom = 15;\r\n            }\r\n\r\n            if (zoom > 15) {\r\n                zoom = 15\r\n            }\r\n        }\r\n\r\n        return zoom;\r\n    }\r\n\r\n    handleMarkerClick = (props, marker) => {\r\n        this.props.filterSpots(props.id);\r\n        this.setState({\r\n            selectedSpot : props,\r\n            activeMarker : marker,\r\n            showingInfoWindow : true,\r\n            center: {lat : props.position.lat, lng : props.position.lng}\r\n        });\r\n    }\r\n\r\n    onInfoWindowClose = () =>\r\n        this.setState({\r\n          activeMarker: null,\r\n          showingInfoWindow: false\r\n        },() => { this.props.unfilterSpots() });\r\n\r\n\r\n    componentDidMount(){\r\n        let pixelWidth = parseInt(this.containerRef.current.offsetWidth);\r\n        this.setState({zoom: this.getZoom(this.props.spots, pixelWidth)});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={ this.props.mapVisible ? 'map-container' : 'map-container hidden' } \r\n                ref={this.containerRef}>\r\n                <Map\r\n                    className='map'\r\n                    google={this.props.google}\r\n                    zoom={this.state.zoom}\r\n                    initialCenter={{lat: this.state.center.lat, lng: this.state.center.lng}}\r\n                    center={{lat: this.state.center.lat, lng: this.state.center.lng}}\r\n                    onMouseout={this.handleMapMouseOut}>            \r\n                    {\r\n                        this.props.spots.map(\r\n                            spot => (\r\n                                <Marker \r\n                                    key={spot.spot_id}\r\n                                    name={spot.name}\r\n                                    id={spot.spot_id}\r\n                                    value={spot.currentValue}\r\n                                    unit={spot.unit}\r\n                                    position={{lat: spot.location.lat, lng: spot.location.lon}}\r\n                                    icon={this.getStatus(spot)}\r\n                                    onClick={this.handleMarkerClick} />\r\n                            )\r\n                        )\r\n                    }\r\n                    {\r\n                        this.props.spots.map(\r\n                            spot => (\r\n                                <InfoWindow \r\n                                    key={spot.spot_id} \r\n                                    marker={this.state.activeMarker}\r\n                                    visible={this.state.showingInfoWindow}\r\n                                    onClose={this.onInfoWindowClose} >\r\n                                    <div className='info-window'> \r\n                                        {\r\n                                            `${this.state.selectedSpot.name} : ` +\r\n                                            `${this.state.selectedSpot.value} ` +\r\n                                            `${this.state.selectedSpot.unit}`\r\n                                        }\r\n                                    </div>\r\n                                </InfoWindow>\r\n                            ))\r\n                    }\r\n                </Map>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper((props) => ({\r\n    apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    language: props.language\r\n}))( MapContainer );\r\n    \r\n  \r\n\r\n    \r\n  ","/*\r\n    File: DataCardGraph.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component displays a svg graph of the flow over a given time for\r\n        a given surf spot.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\nimport '../../style/datacard.scss'\r\n\r\n class DataCardGraph extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    getSpotStatus(){\r\n        let value = this.props.spot.currentValue;\r\n        let min = this.props.spot.min;\r\n        let max = this.props.spot.max;\r\n        let optMin = this.props.spot.optimumFlowLow_i;\r\n        let optMax = this.props.spot.optimumFlowHigh_i;\r\n\r\n        let status = value > min && value < max\r\n                    ? value > optMin && value < optMax \r\n                        ? 'spot-optimum' \r\n                        : 'spot-in'\r\n                    : 'spot-out';\r\n\r\n        return status;\r\n    }\r\n\r\n    drawLineGraph(values, min, max){\r\n\r\n        // set up graph size\r\n        var svgWidth = 400;\r\n        var svgHeight = 400;\r\n\r\n        // gets the max value in the values object\r\n        var maxDataValue = Math.max.apply( Math, values.map((record) => parseInt(record.value)));\r\n\r\n        // Uses max value if larger than surf sport surfable max value\r\n        var maxChartValue = maxDataValue > max ? maxDataValue : max\r\n\r\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\r\n            ,width = svgWidth - margin.left - margin.right\r\n            ,height = svgHeight - margin.top - margin.bottom;\r\n\r\n\r\n        var data = values.map((value) => {\r\n            return {\r\n                value : parseInt(value.value),\r\n                date : new Date(value.dateTime)\r\n            }\r\n        });\r\n\r\n        // set the ranges\r\n        var x = d3.scaleTime()\r\n                .domain(d3.extent(data, (d) => { return d.date; }))\r\n                .range([0, width]);\r\n\r\n        var y = d3.scaleLinear()\r\n                .domain([0, maxChartValue])\r\n                .range([height, 0]);\r\n\r\n        // append the svg obgect to the body of the page\r\n        // appends a 'group' element to 'svg'\r\n        // moves the 'group' element to the top left margin\r\n        var svg = d3.select(`#card-display-graph-${this.props.spot.spot_id}`).append(\"svg\")\r\n                    .attr(\"viewBox\", `0 0 400 400`)\r\n                    .append(\"g\")\r\n                    .attr(\"transform\",\r\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        // Add the valueline path.\r\n        svg.append(\"path\")\r\n            .datum(data)\r\n            .attr(\"class\", \"area\")\r\n            .attr(\"stroke\", \"none\")\r\n            .attr(\"stroke-width\", 0)\r\n            .attr(\"d\", d3.area()\r\n                .x((d) => { return x(d.date) })\r\n                .y0((d) => { return y(min)})\r\n                .y1((d) => { return y(max)})\r\n            )\r\n\r\n        // Add the valueline path.\r\n        svg.append(\"path\")\r\n            .datum(data)\r\n            .attr(\"class\", \"line\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"white\")\r\n            .attr(\"stroke-width\", 30)\r\n            .attr(\"d\", d3.line()\r\n                .x((d) => { return x(d.date) })\r\n                .y((d) => { return y(d.value) })\r\n            )\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        // render the graph\r\n        this.drawLineGraph(this.props.spot.values, this.props.spot.min, this.props.spot.max);\r\n    }\r\n\r\n    render() {\r\n\r\n        let length = this.props.spot.values.length;\r\n        let values = this.props.spot.values;\r\n\r\n        return (\r\n\r\n            <div id={`card-display-graph-${this.props.spot.spot_id}`} \r\n                className={`card-display-graph ${this.getSpotStatus()}`}>\r\n                {\r\n                    length === 0 ||  values === undefined\r\n                    ? <img src={require(\"../../imgs/no-data.svg\")} alt=\"No Data Icon\" />\r\n                    : \"\"\r\n                }\r\n            </div>\r\n            \r\n            );\r\n\r\n        // return (\r\n        //     <img src={this.props.surfable ? GraphPlaceholder : NotGraphPlaceholder} alt='flow graph' />\r\n        // );\r\n    }\r\n }\r\n\r\n\r\nexport default DataCardGraph;","/*\r\n    File: DataCardDisplay.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component displays the basic information about the surf spot.\r\n        It is intended display the name, current status, and other basic information \r\n        about the spot.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport DataCardGraph from './DataCardGraph';\r\nimport '../../style/datacard.scss'\r\n\r\n class DataCardDisplay extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        let currentFlow = this.props.spot.currentValue !== undefined ? this.props.spot.currentValue : 0;\r\n        let min = this.props.spot.min !== undefined ? this.props.spot.min : 0;\r\n        let max = this.props.spot.max !== undefined ? this.props.spot.max : 0;\r\n        let units = this.props.spot.unit !== undefined ? this.props.spot.unit : 'unk';\r\n\r\n        return (\r\n            <div className='data-card-display'>\r\n                <DataCardGraph spot={this.props.spot}/>\r\n                <h2>{this.props.spot.name}</h2>\r\n                <div className='spot-values'>\r\n                    <h3>{ currentFlow +' '+ units }</h3>\r\n                    <h4>{ 'range: ' + min + ' - ' + max + ' ' + units }</h4>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n }\r\n\r\n DataCardDisplay.defaultProps = {\r\n     spot:{}\r\n}\r\n\r\nexport default DataCardDisplay;","/*\r\n    File: DataCardDesc.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component provides in-depth information about the surf spot. It give a \r\n        detailed description, links to additional resourses and other detailed information.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport '../../style/datacard.scss'\r\n\r\n class DataCardDetail extends Component {\r\n\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className='data-card-desc'>\r\n                This is the description!\r\n            </div>\r\n        );\r\n    }\r\n }\r\n\r\nexport default DataCardDetail;","/*\r\n    File: DataCardHistory.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component displays a color coded calendar depicting the average percent \r\n        over a given time the a surf spot is at a surfable level.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport '../../style/datacard.scss'\r\n\r\n class DataCardHistory extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.months = [\r\n            \"January\",\r\n            \"Febuary\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"November\",\r\n            \"December\",\r\n        ]\r\n    }\r\n\r\n    getColorValue(month, day){\r\n        return \"\";\r\n    }\r\n\r\n    getDays(){\r\n        let days = [];\r\n\r\n        for (let i = 0; i < 31; i ++){\r\n            days.push(i + 1);\r\n        }\r\n\r\n        return days;\r\n    }\r\n\r\n    render() {\r\n\r\n        let date = new Date();\r\n        date.setMonth(1)\r\n        return (\r\n            <div className='data-card-history'>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            {\r\n                                this.months.map(\r\n                                    (month) => <th><div>{month}</div></th>\r\n                                )\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.getDays().map(\r\n                                (day) => <tr>\r\n                                            <td>{day}</td>\r\n                                            {\r\n                                                this.months.map(\r\n                                                    (month) => <th className={this.getColorValue()}><div></div></th>\r\n                                                )\r\n                                            }\r\n                                        </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n }\r\n\r\nexport default DataCardHistory;","/*\r\n    File: DataCardDetail.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component displayes the detailed description and history. \r\n        This component is hidden and expands when the user clicks on the display.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport DataCardDesc from './DataCardDesc';\r\nimport DataCardHistory from './DataCardHistory';\r\nimport '../../style/datacard.scss'\r\n\r\n class DataCardDetail extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            activeTab:'describe'\r\n        }\r\n        this.handleHeaderButtonClick = this.handleHeaderButtonClick.bind(this);\r\n    }\r\n\r\n    handleHeaderButtonClick(button){\r\n        this.setState({ activeTab : button });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        let optLow = this.props.spot.optimumFlowLow_i !== undefined ? this.props.spot.optimumFlowLow_i : 0;\r\n        let optHigh = this.props.spot.optimumFlowHigh_i !== undefined ? this.props.spot.optimumFlowHigh_i : 0;\r\n        let optUnit = this.props.unit !== undefined ? this.props.unit : 'unk';\r\n        return (\r\n            <div className='data-card-detail'>\r\n                <div className='detail-header'>\r\n                    <h4>{'optimum range: ' + optLow + ' - ' + optHigh + ' ' + optUnit}</h4>\r\n                    <div className='tab-bar'>\r\n                        <button \r\n                            className={this.state.activeTab === 'describe' ? 'tab-button active': 'tab-button'}\r\n                            onClick={()=>this.handleHeaderButtonClick('describe')} >\r\n                            Description\r\n                        </button>\r\n                        <button \r\n                            className={this.state.activeTab === 'history' ? 'tab-button active': 'tab-button'}\r\n                            onClick={()=>this.handleHeaderButtonClick('history')} >\r\n                            History\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='detail-content'>\r\n                    {\r\n                        this.state.activeTab === 'describe' \r\n                        ? <DataCardDesc />\r\n                        : <DataCardHistory />\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n }\r\n\r\nexport default DataCardDetail;","export const properties = {\r\n    overview_url: '/test-data/overview_spot_data.json',\r\n    detail_url: '/test-data/detail_spot_data.json'\r\n};\r\n","/*\r\n    File: DataCard.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component serves as the high level wrapper for the suf spot \r\n        data display. It assembles all of the various components used \r\n        to present information on each surf spot.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport DataCardDisplay from './DataCardDisplay';\r\nimport DataCardDetail from './DataCardDetail';\r\nimport {properties} from '../../resource/Config';\r\nimport '../../style/datacard.scss'\r\n\r\n class DataCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            details : {}\r\n        }\r\n\r\n        this.onChangeExpand = this.onChangeExpand.bind(this);\r\n    }\r\n\r\n    fetchData(){\r\n        fetch(process.env.PUBLIC_URL + properties.detail_url, {\r\n            headers : { \r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n             }})\r\n        .then((response) => response.json())\r\n        .then((spots) => {\r\n            this.setState({\r\n                details : spots.find(spot => spot.spot_id === this.props.spot.spot_id)\r\n            })\r\n        })\r\n    }\r\n\r\n    async onChangeExpand(event){\r\n        if(event.target.checked){\r\n            this.fetchData();\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchData();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <li className='data-card'>\r\n                <input id={'detail-button-' + this.props.spot.spot_id}\r\n                 className='detail-button'\r\n                 type=\"checkbox\"\r\n                 onChange={this.onChangeExpand}\r\n                 defaultChecked={ this.props.expanded } />\r\n                    <label htmlFor={'detail-button-' + this.props.spot.spot_id} className='detail-button-view'>\r\n                        <DataCardDisplay spot={this.props.spot} />\r\n                        <DataCardDetail spot={this.state.details} unit={this.props.spot.unit}/>\r\n                    </label>\r\n            </li>\r\n        );\r\n    }\r\n }\r\n\r\n DataCard.defaultProps = {\r\n    spot:{ spot_id : 0 }\r\n }\r\n\r\nexport default DataCard;","/*\r\n    File: DataCardDeck.js\r\n    Author: Chris Mowry\r\n    Date: 05/16/2020\r\n    Email: cmowry84@gmail.com\r\n    Description:\r\n\r\n        This component holds the collection of data cards.\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport DataCard from './DataCard';\r\nimport '../../style/datacard.scss'\r\n\r\n class DataCardDeck extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='data-card-deck'>\r\n                <ul>\r\n                    {\r\n                        this.props.spots.map(\r\n                            (spot) => <DataCard key={spot.spot_id} \r\n                                                spot={spot} \r\n                                                expanded={this.props.expanded}/>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n }\r\n\r\nexport default DataCardDeck;","/*\n    File: App.js\n    Author: Chris Mowry\n    Date: 05/16/2020\n    Email: cmowry84@gmail.com\n    Description:\n\n        This component utilizes all of the high level components to allow the user\n        to interact with the web application. It also makes the inital data request \n        from the server-side data source.\n*/\n\nimport React, { Component } from 'react';\nimport Header from './components/header/Header';\nimport MapContainer from './components/map/MapContainer';\nimport DataCardDeck from './components/data_cards/DataCardDeck';\nimport {properties} from './resource/Config';\nimport './style/app.scss';\n\n\nclass App extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            surfSpots: [],\n            filteredSpots: [],\n            mapVisible: false,\n            expandedCards: false,\n            filtered: false\n        }\n\n        this.toggleMapVisibility = this.toggleMapVisibility.bind(this);\n        this.toggleCardExpand = this.toggleCardExpand.bind(this);\n        this.filterSpots = this.filterSpots.bind(this);\n        this.unfilterSpots = this.unfilterSpots.bind(this);\n    }\n\n    toggleMapVisibility(){\n        this.setState({mapVisible: !this.state.mapVisible})\n    }\n\n    toggleCardExpand(){\n        this.setState({expandedCards: !this.state.expandedCards})\n    }\n\n    filterSpots(spot_id){\n        this.setState({ \n            filtered : true, // sets the filtered spots true\n            filteredSpots : this.state.surfSpots.filter((spot) => spot.spot_id === spot_id)\n        }); \n    }\n\n    unfilterSpots(){\n        this.setState({ \n            filtered : false // sets the filtered spots false\n        }); \n\n        this.getSurfSpots(); // gets all of the spots\n    }\n\n    getSurfSpots(){\n       // fetches surf spots from url\n       fetch(process.env.PUBLIC_URL + properties.overview_url, {\n        headers : { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n         }})\n        .then((response) => response.json())\n        .then((spots) => {\n\n            let spotName = this.props.match.params.spot;\n            let gageNumber = parseInt(this.props.match.params.gage);\n\n            // filters for url paramater for spot\n            if (spotName){\n                spots = spots.filter((spot) => spot.name.toLowerCase() === spotName.toLowerCase());\n                this.setState({ mapVisible : true, expandedCards : true });\n            }\n\n            // filters for path parameter for gage number\n            if (gageNumber){\n                spots = spots.filter((spot) => spot.site === gageNumber );\n\n                // if there is only 1 record, expand the map and the card\n                if (spots.length === 1){\n                    this.setState({ mapVisible: true, expandedCards : true  })\n                }\n            }\n\n            this.setState({ \n                surfSpots : spots,\n                filteredSpots : spots\n            })\n        })\n    }\n\n    componentDidMount(){\n        this.getSurfSpots();\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <Header mapVisible={this.state.mapVisible} toggleMapVisibility={this.toggleMapVisibility}/>\n                <div className='content'>\n                    <MapContainer spots={ this.state.surfSpots } \n                                  mapVisible={ this.state.mapVisible }\n                                  filterSpots={this.filterSpots} \n                                  unfilterSpots={this.unfilterSpots} />\n                    <DataCardDeck spots={ this.state.filteredSpots } expanded={this.state.expandedCards}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Route, HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './style/default.scss'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n// Change to BrowserRouter for deployment\n<HashRouter basename={process.env.PUBLIC_URL}>\n    <Route exact path = \"/\" component = {App}/>\n    <Route exact path = \"/spots\" component = {App}/>\n    <Route exact path = \"/spots/:spot\" component = {App}/>\n    <Route exact path = \"/gages/\" component = {App}/>\n    <Route exact path = \"/gages/:gage\" component = {App}/>\n</HashRouter>\n,document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/thumbs-up.e033c19d.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumbs-down.1694df64.svg\";","module.exports = __webpack_public_path__ + \"static/media/ok-hand.66def7bb.svg\";"],"sourceRoot":""}